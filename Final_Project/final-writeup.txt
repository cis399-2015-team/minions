Author:  Lily Moch
Team:    Minions
         CiS 399, 2015


== Introduction ==
For the final project for the 2015 iteration of CiS 399, team Minions has set up a MySQL server with a full
web management interface. For the purposes of this class, circumstances and timeframe, the database is
reasonably secure. Users may manage their authorized tables, but it takes a system administrator with access 
to the proper EC2 instance to create or remove users.   


== A Note on the Database ==
For convenience, we are using the database Lily created for her Database Processing class last fall for the
fake coffee company "Brewed Awakening" written in MySQL using InnoDB (a storage engine for MySQL). 


== PHP on apache2 ==
I added a few extensions to the web-server module because it sense to extend that module rather than make a 
new one just for PHP + stuff, since it will be used in tandem for our purposes.
I have experience in PHP used with MySQL, and it has many useful libraries and extensions, which is why I 
decided to use it.


== MySQL Server configuration management ==
There is a puppet module which is attached to the minions-puppetmaster node to manage the status/configuration
of the mysql server found there.

This package overwrites the /etc/mysql/my.cnf file with the file within the module called mysql-server_config, 
which was copied from the default initially. The file sets the mode to read/write by owner, and ensures the
package is installed before being finished with the file.

The service is enabled to automatically start at boot time, restart if it is not running, allows status info,
allows restarting, and also requries the mysql-server package and configuration file to be present, and and
any changes to the config file to cause the service to restart.


== phpMyAdmin to manage tables and DBA users ==
After struggling in the console for quite some time, I decided to try to use phpMyAdmin for database management.
For the purpose of creating multiple phpMyAdmin accounts for pretend DBAs who would need to be able to manage
their own table set at will (and so their accounts could be removed if/when they left this company), the 
following php5 modules were used: php5-gd, php5-mysql php5-mcrypt.

In particular, mycrypt supports a variety of block algorithms: ES, TripleDES, Blowfish (default), 3-WAY, 
SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 and GOST in CBC, OFB, CFB and ECB cipher modes. Additionally, it 
supports RC6 and IDEA which are considered "non-free". CFB/OFB are 8bit by default. To be used to secure DBA 
user accounts.

To connect to the web management interface, I enabled the apache web-server module on the puppetmaster EC2 instance 
(since it hosts the mysql server and is the designated instance for admin tasks) so - you must go to the IP/DNS of
the minions-puppetmaster instance (currently http://52.27.162.176/phpmyadmin) and enter the administrator credentials
sent to you. From there, you may perform actions similar to using something like MySQL workbench, but hosted on the 
web! Users may only see/modify tables that they own.

This blog post greatly assisted me in its configuration: 
https://alandoyle.com/tutorials/configuring-phpmyadmin-for-multiple-users/


== Making the web interface and failures ==
So, neither my nor Mustafa's web interfaces fit well with this schema. My web interface was designed for this
database, but for a different class, and I can't figure out why my PHP can't connect to a remote database, and 
Mustafa's is too insecure to put on the web. Both attempts can be found in the minions repository under conspicuous 
names.

The design of my web interface was a bit of slightly secure PHP cleverness Prof. Wilson showed us in 451, storing
the connection data is always the issue - so some degrees of separation were implemented, and the data was stored in
a PHP file in the same directory, but if someone tried to URL hack and see the raw connection data they would see
a blank page with no useful source to read because PHP only displays what you specifically tell it to display! I 
can't remember how someone might break this, just that it is possible. Since I used php scripts, I was also able to
do a basic level of SQL-injection-protection, but since I can't even access the database, I guess it is even more 
secure!

I easily spent the most time on this, and regret that I didn't leave enough time to ask questions.

Thank you for the wonderful class!
